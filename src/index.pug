doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Git, Tout simplement

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article.deck

      section
        h1 Git, Tout simplement

      section
        h2 Commençons par le commencement
      section
        div.row

          li.empty
            ul
              li.notbullet: img(src='images/paul-normal.svg', width="60%")
              li.notbullet Paul Request
          li.empty
            ul
              li.notbullet: img(src='images/jane-normal.svg', width="60%")
              li.notbullet Jane Kins

      section
        h2 la config !
        ul
          li: code.language-git git config --global user.name "Matthieu D."
          li: code.language-git git config --global user.email "e@mail.com"
          li le tout sera enregistré ~/.gitconfig
          li Si on veut des informations spécifiques à un repo

          li: code.language-git git config user.name "Matthieu DUVAL"
          li: code.language-git git config user.email "email@mail.com"
          li le tout est stocké dans .git/config

      section
        img(src="images/local-config.png", width="90%")

      section
        h2 les commandes de base
        ul
          li: code.language-git git status
          li: code.language-git git log --graph --all --decorate
          li: code.language-git git fetch
          li: code.language-git git pull (--rebase)
          li: img(src="images/pull-vs-fetch-merge.svg", width="60%")


      section
        h2 Les différentes zones locales!
        img(src="images/git-index-initial-base.svg", width="60%")
        aside.notes
          p Commeçons par expliquer les differents états de nos fichier:
          p Nos fichiers peuvent etre dans les etat
          p - <b>le working directory</b> comme son nom l'inqique c'est notre zone de travail,
          p - <b>l'index</b> on peut appeler ça la Zone de tranfert.
          p - <b>le head</b> le head reprense se qu'on a commiter

      section
        p Prenons un fichier en v1 file.txt
        img(src="images/git-index-initial-state.svg", width="60%")
      section
        p lorsqu'on le modifie
        img(src="images/git-index-initial-state-status.svg", width="60%")
        hr
        img(src="images/git-index-initial-state-status.png", width="60%")
      section
        p git add 
        p: code.language-bash git add file.txt
        img(src="images/git-index-added-file.svg", width="60%")
        hr
        img(src="images/git-index-added-file.png", width="60%")
      section
        p git commit 
        p: code.language-git git commit -m "Mon fichier de la mort qui tue"
        img(src="images/git-index-committed-file.svg", width="60%")
        hr
        img(src="images/git-index-committed-file.png", width="60%")
        p: code.language-git git push

      section
        p ah la boulette !
        img(src="images/la_boulette.gif", width="60%")
        p on a fait une erreur
        aside.notes
          p on à maleheuresement fait une faute le fichier
      section
        img(src="images/dont-panic.png", width="60%")
        aside.notes
         p pas de panique on va pouvoir corriger tout ça
      section
        h3 grâce au amend
        ul
          li on commence par corriger notre fichier
          li: code.language-git git add file.txt
          li et là ça diffère un peu
          li: code.language-git git commit --amend
          li ça lance un interpréteur vi qui nous montre le nouveau commit
          li on confirme que tout est ok (ECHAP :wq)
          li: code.language-git git push --force
      section
        h2 c'est vachement bien mais ....
        aside.notes
          p si on veux aller plus loin que le dernier commit, la on va devoir fait un peu plus de cours
      section
        img(src="images/paul-doubtful.svg", width="50%")
        h3 "C'est avant que tu as fait une erreur"

      section 
        h2 comment identifier un commit
      section
        ul 
          li <b>le SHA </b><div class="git-sha"> 231ca74f8444120a974ac786cf8c4d4b05de0a4a</div><div class="git-sha">231ca74</div><div class="git-sha">231ca74~</div>
          li <b>la référence à la HEAD </b><div class="git-head">HEAD</div><div class="git-head">HEAD~</div><div class="git-head">HEAD~2</div>
          li <b>la référence à la BRANCHE </b><div class="git-branch">master</div><div class="git-branch">master~</div><div class="git-branch">master~2</div>
          li <b>la référence au tag </b><div class="git-tag">0.1.0</div><div class="git-tag">0.1.0~</div><div class="git-tag">0.1.0~2</div>
        aside.notes
          p il y a plusieurs manière d'identifier un commit 
          p le sha qui est UNIQUE à chaque commit et découle du commit courant et du commit précédent (si vous changez le commit precedent, le sha du commit suivant en sera aussi affecté)
          p le plus important c'est la référence par rapport;
          p seul le sha est le vrai identificateur du commit;

      section
        h2 Ça fonctionne aussi avec l'origin
        ul
          li master <div class="git-origin">origin/master</div> <div class="git-origin">origin/master~</div><div class="git-origin">...</div>
          li head <div class="git-origin">origin/HEAD</div> <div class="git-origin">origin/HEAD~</div><div class="git-origin">...</div>
      section 
        h2 mais...
        ul
          li Le sha <div class="git-origin"><del>origin/231ca74</del></div>
          li Le tag <div class="git-origin"><del>origin/0.1.0</del></div>
        aside.notes
          p en effet, les tags et les sha sont des identifiants uniques a tout le monde
          p la ou les branches et la head est locale a chacun
      section 
        h2 Pourquoi identifier un commit ?
        aside.notes
          p vous allez me dire c'est bien beau d'identifier un commit mais a quoi ça sert ?
          p identifier un commit va nous permettre de nous deplacer dans l'arbre
      section
        h2 le commit amend ne fonctionne pas tout le temps.
        aside.notes
          p le moment est venu de parler du commit de fixup


      section
        h2 fixup !
        ul
          li on commence par corriger notre fichier
          li: code.language-git git add file.txt
          li et la ça diffère un peu
          li: code.language-git git commit --fixup (sha du commit)
          li: img(src="images/histo-fixup.png" width="65%")
      section
        h2 fixup !
        ul
          li on va donc faire le rebase
          li -i
          li (sha du commit)~
          li --autosquash
          li: code.language-git git rebase -i (sha du commit)~ --autosquash
        aside.notes
          p rebase : on réecrit l'historique
          p -i pour interactive, afin qu'on puisse suivre au fur et a mesure
          p (sha du commit)~ A partir du commit precedent
          p --autosquash qui va fusionner les commit de fixup
      section
        h2 fixup!
        img(src="images/histo-fixup-end.png", width="70%")
        h2 \o/

      section
        img(src="images/paul-doubtful.svg", width="50%")
        h3 "mais ça sert a rien ton truc !"

      section
        h3 "Bon deplace moi tout ça sur une branche poubelle"
        h4 c'est donc ce que nous allons faire.

      section
        ul
          li: code.language-git git branch trash
          li: code.language-git git push -u origin trash
          li: code.language-git git reset --hard $(sha premier commit)
          li: img(src="images/reset-trash.png", width="60%")
          li: code.language-git git push -f
          li: img(src="images/force-push-trash.png", width="60%")
      section
        img(src="images/jane-doubtful.svg", width="40%")
        h3 "Heu ouais mais si on a qu'une branche, je fais comment pour gerer tous mes environnements ?"
      section
        h2 Voila ce que l'on a habituellement
        img(src="images/multi-branch-init.png", width="70%")
      section
        h2 L'étape du déploiement en prod
      section
        ul
          li: code.language-git git checkout dev
          li: code.language-git git pull --rebase
          li: code.language-git git commit -m "Préparation à la livraison" <br> --allow-empty
          li: code.language-git git push
          li: code.language-git git checkout master
          li: code.language-git git merge -m "Livraison 1.0" dev --no-ff
          li: code.language-git git tag 1.0
          li: code.language-git git push
          li: code.language-git git push --tags
      section
        img(src="images/multi-branch-end.png", width="70%")
      section
        h2 bonus !
      section
        ul
          li.empty
            p voir les changements du dernier commit
            code.language-git git show
          li.empty
            p voir les changements par rapport au dernier commit
            code.language-git git diff
          li.empty
            p comparer deux commits
            code.language-git git diff (shaCommit1)..(shaCommit2)
      section
        ul
          li.empty
            p retrouver un commit disparu
            code.language-git git reflog
          li.empty
            p rechercher un commit
            code.language-git git log --grep=(patern)
          li.empty
            p retourner sur la branche précédente
            code.language-git git checkout -
          
      section
        ul
          li.empty
            p récupérer un repo git
            code.language-git git clone (urlDuRepo)
          li.empty
            p avoir de l'aide
            code.language-git git (commande) --help
          li.empty
            p La documentation officielle de git
            a(href="https://git-scm.com/docs/") https://git-scm.com/docs/

      section
        h1 Merci
        a(href="https://github.com/mghignet/git-dammit-talk/") 
          p Basé sur : <hr> @github/mghignet/git-dammit-talk
        a(href="https://github.com/ptimatth/simply-git/") 
          p Sources diapo: <hr> @github/ptimatth/simply-git
      section
        div.row
          img(src='images/paul-happy.svg', width="20%")
          img(src='images/jane-happy.svg', width="20%")
        h3 "On a des questions !"
       

          
          
    script(src='build/build.js')
